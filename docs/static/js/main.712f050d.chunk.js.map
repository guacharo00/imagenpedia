{"version":3,"sources":["components/Title.js","firebase/config.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","components/ImageGrid.js","hooks/useFirestore.js","components/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFireStorage","timeStamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","ImageGrid","setSelectedImage","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","useFirestore","map","key","whileHover","opacity","layout","onClick","img","src","alt","transition","delay","Modal","selectedImage","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.712f050d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>ImagenPedia</h1>\n      <h2>Tus Imagenes</h2>\n      <p>Toca el signo de <span className=\"span\">+</span> para subir una imagen desde tu equipo</p>\n    </div>\n  )\n}\n\nexport default Title;","import * as firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBZq4kRG8nQAAMWfONYCkM28XOgesRzmxM\",\n    authDomain: \"fructis-gallery.firebaseapp.com\",\n    databaseURL: \"https://fructis-gallery.firebaseio.com\",\n    projectId: \"fructis-gallery\",\n    storageBucket: \"fructis-gallery.appspot.com\",\n    messagingSenderId: \"628063699984\",\n    appId: \"1:628063699984:web:106888f8ab230f31e8b695\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  const projectStorage = firebase.storage();\n  const projectFireStorage = firebase.firestore();\n  const timeStamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  export {\n      projectFireStorage,\n      projectStorage,\n      timeStamp\n  }\n","import { useState, useEffect } from 'react';\nimport { projectStorage, projectFireStorage, timeStamp } from '../firebase/config';\n\n\nconst useStorage = (file) => {\n\n    const [progress, setProgress] = useState(null);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(()=> {\n\n        // References\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFireStorage.collection('images');\n\n        // Uploading the file to de reference\n        storageRef.put(file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress( percentage );\n        }, (error) => {\n            setError( error );\n        }, async() => {\n            let url = await storageRef.getDownloadURL();\n            let createdAt = timeStamp();\n            collectionRef.add({\n                url,\n                createdAt\n            })\n            setUrl( url );\n        })\n\n    }, [file]);\n\n    return { progress, url, error }\n\n}\n\n\nexport default useStorage;","import React, { useEffect } from 'react'\nimport useStorage from '../hooks/useStorage'\nimport { motion } from 'framer-motion';\n\nexport const ProgressBar = ({file, setFile}) => {\n\n    const { url, progress } = useStorage( file );\n    \n    useEffect(() => {\n        if(url){\n            setFile(null)\n        }\n    }, [url, setFile])\n\n    return (\n        <motion.div className=\"progress-bar\"\n         initial={{width: 0}}\n         animate={{width: progress + '%'}}\n        >\n\n        </motion.div>\n    )\n}\n","import React, { useState } from 'react'\nimport { ProgressBar } from './ProgressBar';\n\nexport const UploadForm = () => {\n\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpg', 'image/jpeg'];\n\n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n\n        if( selected && types.includes( selected.type ) ){\n            setFile( selected );\n            setError('');\n        } else {\n            setFile(null);\n            setError(`The file type (${selected.type}) is not a valid format like png or jpg`);\n        }\n    }\n    return (\n        <form>\n            <label>\n              <input type=\"file\" onChange={changeHandler} />\n              <span>+</span>\n            </label>\n            <div className=\"output\">\n                { error && <div className=\"error\"> {error} </div> }\n                { file && <div className=\"\"> { file.name } </div> }\n                { file && <ProgressBar file={file} setFile={ setFile }/> }\n            </div>\n        </form>\n    )\n}\n","import React from 'react'\nimport { useFirestore } from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nexport const ImageGrid = ({setSelectedImage}) => {\n\n    const { docs } = useFirestore('images');\n\n    return (\n        <div className=\"img-grid\">\n           { docs && docs.map(doc => (\n               <motion.div className=\"img-wrap\" key={doc.id}\n                whileHover={{opacity: 1}}\n                layout \n                onClick={() => setSelectedImage(doc.url)}>\n                   <motion.img src={doc.url} alt=\"Uploaded pic\"\n                    initial={{opacity: 0}}\n                    animate={{opacity: 1}}\n                    transition={{delay: 1}} \n                   />\n               </motion.div>\n           )) }\n        </div>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { projectFireStorage } from '../firebase/config';\n\nexport const useFirestore = (collection) => {\n\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n\n        const unsub = projectFireStorage.collection( collection )\n            .orderBy('createdAt', 'desc')\n            .onSnapshot((snap) => {\n                let documents = [];\n                snap.forEach(doc => {\n                    documents.push( {...doc.data(), id: doc.id} );\n                })\n                setDocs( documents );\n            })\n\n            return () => unsub();\n    },[collection])\n\n    return {\n        docs\n    }\n}\n","import React from 'react'\nimport { motion } from 'framer-motion'\n\nexport const Modal = ( {selectedImage, setSelectedImage} ) => {\n\n    const handledClick = (e) => {\n\n        if( e.target.classList.contains('backdrop') ){\n            setSelectedImage(null)\n        }\n    }\n\n    return (\n        <motion.div className=\"backdrop\" onClick={ handledClick }\n         initial={{opacity: 0}}\n         animate={{opacity: 1}}\n        >\n            <motion.img src={selectedImage} alt=\"enlarged pic\"\n              initial={{ y: '-100vh' }}\n              animate={{ y: 0 }}\n            />\n        </motion.div>\n    )\n}\n","import React, { useState } from 'react';\nimport Title from './components/Title';\nimport { UploadForm } from './components/UploadForm';\nimport { ImageGrid } from './components/ImageGrid';\nimport { Modal } from './components/Modal';\n\nfunction App() {\n\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImage={setSelectedImage}/>\n      { selectedImage && <Modal selectedImage={selectedImage} setSelectedImage={setSelectedImage}/> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}